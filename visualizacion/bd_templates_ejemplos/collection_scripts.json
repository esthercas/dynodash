[
    {
        "name" : "yearSlider",
        "content" : "dmFyIHNsaWRlclJhbmdlOwp2YXIgc2xpZGVyOwoKZnVuY3Rpb24gZ2V0RGF0ZXMoKSB7CiAgICByZXR1cm4gJC5hamF4KHsKICAgICAgICBkYXRhVHlwZTonanNvbicsCiAgICAgICAgdHlwZTogJ0dFVCcsCiAgICAgICAgdXJsOiAne3t7dXJsfX19JwogICAgfSk7Cn0gCgp2YXIgZ2V0RGF0ZXNDQiA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgIHNsaWRlclJhbmdlID0gcmVzcG9uc2U7CiAgIHNsaWRlciA9IG5ldyBTbGlkZXIoJyNzbGlkZXJ7e3tmcmFtZV9pZH19fScsIHsJICAgCiAgICAgICAgdG9vbHRpcDogJ3Nob3cnLAogICAgICAgIHRpY2tzOiBbcmVzcG9uc2UubWluLCBNYXRoLnRydW5jKChyZXNwb25zZS5tYXgrcmVzcG9uc2UubWluKS8yKSwgcmVzcG9uc2UubWF4XSwKICAgICAgICB0aWNrc19sYWJlbHM6IFtyZXNwb25zZS5taW4sIE1hdGgudHJ1bmMoKHJlc3BvbnNlLm1heCtyZXNwb25zZS5taW4pLzIpLCByZXNwb25zZS5tYXhdLAogICAgICAgIG1pbjogcmVzcG9uc2UubWluLAogICAgICAgIG1heDogcmVzcG9uc2UubWF4LAogICAgICAgIHN0ZXA6IHJlc3BvbnNlLnN0ZXAsCiAgICAgICAgdmFsdWU6IHJlc3BvbnNlLm1heCwKICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiAnYcOxbzogJyArIHZhbHVlOwogICAgICAgIH0KICAgIH0pOwogIAogIHNsaWRlci5vbignc2xpZGVTdG9wJywgZnVuY3Rpb24oc2xpZGVFdnQpIHsKICAgICAgLy8gYWN0dWFsaXphbW9zIGVsIHZhbG9yIGRlbCBhw7FvIGVuIEJpZ2FuU3RydWN0dXJlCiAgICAgIEJpZ2FuU3RydWN0dXJlLmdsb2JhbFllYXIoc2xpZGVFdnQpOwogICAgfSk7CSAgCn0KCi8vIEJVVFRPTlMKdmFyIGludGVydmFsOwpmdW5jdGlvbiBzdGFydEJ1dHRvbigpIHsKICAgIGludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCdtb3ZlU2xpZGVyKCknLCAzMDAwKTsKfQoKZnVuY3Rpb24gbW92ZVNsaWRlcigpIHsKICAgIHZhbHVlID0gcGFyc2VJbnQoc2xpZGVyLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkgKyBzbGlkZXJSYW5nZS5zdGVwOwogICAgaWYgKHZhbHVlID4gc2xpZGVyUmFuZ2UubWF4KSB7CiAgICAgICAgdmFsdWUgPSBzbGlkZXJSYW5nZS5taW47CiAgICB9CiAgICBCaWdhblN0cnVjdHVyZS5nbG9iYWxZZWFyKHZhbHVlKTsKfQoKZnVuY3Rpb24gc3RvcEJ1dHRvbigpIHsKICAgIHdpbmRvdy5jbGVhckludGVydmFsKGludGVydmFsKTsKICAgICAgc2xpZGVyLm9uKCdzbGlkZVN0b3AnLCBmdW5jdGlvbihzbGlkZUV2dCkgewogICAgICAgICAgLy8gYWN0dWFsaXphbW9zIGVsIHZhbG9yIGRlbCBhw7FvIGVuIEJpZ2FuU3RydWN0dXJlCiAgICAgICAgICBCaWdhblN0cnVjdHVyZS5nbG9iYWxZZWFyKHNsaWRlRXZ0KTsKICAgICAgICB9KTsJIAp9ICAgCgppZiAoQmlnYW5TdHJ1Y3R1cmUpIHsKICAgIEJpZ2FuU3RydWN0dXJlLmdsb2JhbFllYXIuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHsKICAgICAgICAvL2NvbnNvbGUubG9nKCdzZXQgc2xpZGVyIHZhbHVlOicgKyBCaWdhblN0cnVjdHVyZS5nbG9iYWxZZWFyKCkpOwogICAgICAgIGlmIChzbGlkZXIuZ2V0VmFsdWUoKSAhPSBCaWdhblN0cnVjdHVyZS5nbG9iYWxZZWFyKCkpIHsKICAgICAgICAgICAgc2xpZGVyLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBCaWdhblN0cnVjdHVyZS5nbG9iYWxZZWFyKCkpOwogICAgICAgICAgICBzbGlkZXIucmVmcmVzaCh7IHVzZUN1cnJlbnRWYWx1ZTogdHJ1ZSB9KTsKICAgICAgICB9CiAgICB9KTsKfQkKCgokKGdldERhdGVzKCkKICAgIC5kb25lKGdldERhdGVzQ0IpKTsKCgo="
    },
    {
        "name" : "mapLineDynS",
        "content" : "LyoqCiAqIFZpc3VhbGl6YSBtYXBhIGRlIEFyYWfDs24gcG9yIHNlY3RvcmVzLCAKICogeSBsw61uZWFzIGRlIGV2b2x1Y2nDs24gcG9yIGHDsW9zLgogKiBUb2RhcyBlbGxhcyB2aW5jdWxhZGFzIGEgQmlnYW5TdHJ1Y3R1cmUgY29uIAogKiBjb25leGnDs24gcG9yIHNlY3RvciB5IGHDsW8uCiAqLwoKLyogRm9ybWF0byBkZSBsb3MgZGF0b3MgcmVjaWJpZG9zOgogKiBbCiAgICB7CiAgICAgICAgJ2lkJzogMSwKICAgICAgICAndmFsb3InOiA4LjIyLAogICAgICAgICdzZWN0b3InOiAnMTEnLAogICAgICAgICdzbm9tYnJlJzogJ0hVRVNDQScsCiAgICAgICAgJ3pvbmEnOiBudWxsLAogICAgICAgICd6bm9tYnJlJzogbnVsbCwKICAgICAgICAneWVhcic6IDIwMDMKICAgIH0sIC4uLgogICBdCiAqLwoKdmFyIG1hcFJlc3VsdHN7e3tmcmFtZV9pZH19fTsKLy8gQ2hhcnQgcGFyYSB2aXN1YWxpemFyIGxpbmVzCnZhciBjaGFydHt7e2ZyYW1lX2lkfX19OwovLyBtYXBhIGRpbsOhbWljbwp2YXIgbWFwe3t7ZnJhbWVfaWR9fX0gPSAKICAgIG5ldyBiaWdhbk1hcEFyYWdvblMoJyNtYXB7e3tmcmFtZV9pZH19fScpOwoKCgovLyBHZXQgZ3JhcGggZGF0YSBmcm9tIHF1ZXJ5CmZ1bmN0aW9uIGdldERhdGF7e3tmcmFtZV9pZH19fSgpIHsKICAgIHJldHVybiAkLmFqYXgoewogICAgICAgIGRhdGFUeXBlOidqc29uJywKICAgICAgICB0eXBlOiAnR0VUJywKICAgICAgICB1cmw6ICd7e3t1cmx9fX0nCiAgICB9KTsKfSAKCgovLyBDYWxsYmFjayBmdW5jdGlvbgovLyBHZXN0aW9uYSBsYSBzZXJpZSB0ZW1wb3JhbCB5IGVsIG1vdmltaWVudG8gZGluw6FtaWNvCnZhciBnZXREYXRhQ0J7e3tmcmFtZV9pZH19fSA9IGZ1bmN0aW9uKHJvd3MpIHsKICAgIAogICAgbWFwUmVzdWx0c3t7e2ZyYW1lX2lkfX19ID0gcm93czsKCiAgICAvLyBDdXJyZW50IHllYXIKICAgIHZhciB5ciA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHJvd3MubWFwKGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueWVhcjsgfSkpOwkgICAKCiAgICAvLyBHbG9iYWwgbWF4IHZhbHVlCiAgICB2YXIgbSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHJvd3MubWFwKGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udmFsb3I7fSkpOwogICAgCiAgICBmaWx0ZXJlZFJvd3MgPSByb3dzLmZpbHRlcihyb3cgPT4gcm93LnllYXIgPT0geXIpOwoKICAgIG1hcHt7e2ZyYW1lX2lkfX19LmRhdGEoZmlsdGVyZWRSb3dzKQogICAgICAgIC50aXRsZShudWxsKQogICAgICAgIC5vcGFjaXR5KDEpCiAgICAgICAgLmRvbWFpbk1heChtKQogICAgICAgIC5jb2xvckFycmF5KGdldEJpZ2FuQ29sb3JMaXN0KGJpZ2FuQ29sb3JzLk5FR0FUSVZFLDUpKTsKICAgIAogICAgbWFwe3t7ZnJhbWVfaWR9fX0ucGFpbnQoKTsJCQoKCiAgICAKICAgIAogICAgCiAgICB2YXIgbGluZVN0cnVjID0geyAnb3B0aW9ucyc6IAogICAgeyAndGl0bGUnOiAnJywneEF4aXNUeXBlJzogJ2xpbmVhcicsJ3ZhbHVlU3VmZml4JzogJyUnfSwgCiAgICAgICAgJ293bic6IFtdLCAKICAgICAgICAnbGluZXMnOiBbXSwgCiAgICAgICAgJ3Jhbmdlcyc6IFtdIAogICAgfSAKICAgIAogICAgc2VjdG9yZXMgPSBbJzExJywnMTInLCcyMScsJzMxJywnMzInLCc0MScsJzQyJywnNTEnXTsKICAgIAogICAgc2VjdG9yZXMuZm9yRWFjaChmdW5jdGlvbihzZWN0b3IpewogICAgICAgIGxpbmVSb3dzID0gbWFwUmVzdWx0c3t7e2ZyYW1lX2lkfX19LmZpbHRlcihyb3cgPT4gcm93LnNlY3RvciA9PSBzZWN0b3IpOwogICAgICAgIHZhciBzZXJpZSA9IHsgCiAgICAgICAgICAgICAgICAnbmFtZSc6IGxpbmVSb3dzWzBdLnNub21icmUsIAogICAgICAgICAgICAgICAgJ2NvZGUnOiBzZWN0b3IsCiAgICAgICAgICAgICAgICAnZGVmYXVsdFZpc2libGUnOiB0cnVlLCAKICAgICAgICAgICAgICAgICd2YWx1ZXMnOiBbXQogICAgICAgIH0JCiAgICAgICAgbGluZVJvd3MuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KXsKICAgICAgICAgICAgc2VyaWUudmFsdWVzLnB1c2goW2VsZW1lbnQueWVhciwgZWxlbWVudC52YWxvcl0pOwogICAgICAgIH0pOwogICAgICAgIGxpbmVTdHJ1Yy5saW5lcy5wdXNoKHNlcmllKTsKICAgIH0pOwoKICAgIAogICAgLy8gQ3JlYXRlIGNoYXJ0CiAgICBjaGFydHt7e2ZyYW1lX2lkfX19ID0gCiAgICAgICAgYmlnYW5TaG93SGlnaENoYXJ0TGluZUdyYXBoKGxpbmVTdHJ1YywgJ2hje3t7ZnJhbWVfaWR9fX0nLCB7dGl0bGU6bnVsbCxoZWlnaHQ6JzEyMCUnfSk7CiAgICAKICAgIAogICAgLy8gU2V0IGNsaWNrIGV2ZW50IHRvIHNlbGVjdCB5ZWFyCiAgICBjaGFydHt7e2ZyYW1lX2lkfX19LnVwZGF0ZSh7CiAgICAgICAgcGxvdE9wdGlvbnM6IHsKICAgICAgICAgICAgc2VyaWVzOiB7CiAgICAgICAgICAgICAgICBwb2ludDogewogICAgICAgICAgICAgICAgICAgIGV2ZW50czogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazpmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCaWdhblN0cnVjdHVyZS5nbG9iYWxZZWFyKHRoaXMuY2F0ZWdvcnkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CiAgICAKCiAgICAvLyBiaW5kIEJpZ2FuU3RydWN0dXJlIG9ic2VydmFibGUgZm9yIHNlY3RvciBjaGFuZ2UKICAgIEJpZ2FuU3RydWN0dXJlLmdsb2JhbFNlY3Rvci5zdWJzY3JpYmUoZnVuY3Rpb24gKCkgewogICAgICAgIGlmKHR5cGVvZiBCaWdhblN0cnVjdHVyZS5nbG9iYWxTZWN0b3IoKSAhPSAndW5kZWZpbmVkJykgewogICAgICAgICAgICBtYXB7e3tmcmFtZV9pZH19fS5zZWN0b3Jab29tKEJpZ2FuU3RydWN0dXJlLmdsb2JhbFNlY3RvcigpLmNvZGlnbyk7CiAgICAgICAgICAgIHMgPSBCaWdhblN0cnVjdHVyZS5nbG9iYWxTZWN0b3IoKTsKICAgICAgICAgICAgc2VjdG9yZXMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpbmRleCl7CiAgICAgICAgICAgICAgICBjaGFydHt7e2ZyYW1lX2lkfX19LnNlcmllc1tpbmRleF0uc2V0VmlzaWJsZSgocy5jb2RpZ28gPT0gZWxlbWVudCksIGZhbHNlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNoYXJ0e3t7ZnJhbWVfaWR9fX0ucmVkcmF3KCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBtYXB7e3tmcmFtZV9pZH19fS5hcmFnb25ab29tKCk7CiAgICAgICAgICAgIGNoYXJ0e3t7ZnJhbWVfaWR9fX0uc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7CiAgICAgICAgICAgICAgICBlbGVtZW50LnNldFZpc2libGUodHJ1ZSwgZmFsc2UpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY2hhcnR7e3tmcmFtZV9pZH19fS5yZWRyYXcoKTsJCQkgICAKICAgICAgICB9CiAgICB9KTsKICAgIAogICAgCiAgICAvLyBJbnRlcmFjY2nDs24gY2FtYmlvIGRlIGHDsW8KICAgIEJpZ2FuU3RydWN0dXJlLmdsb2JhbFllYXIuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgeSA9IEJpZ2FuU3RydWN0dXJlLmdsb2JhbFllYXIoKQogICAgICAgIAogICAgICAgIC8vIHNlbGVjdCBkYXRhCiAgICAgICAgZmlsdGVyZWRSb3dzID0gbWFwUmVzdWx0c3t7e2ZyYW1lX2lkfX19LmZpbHRlcihyb3cgPT4gcm93LnllYXIgPT0geSk7CgogICAgICAgIC8vIHVwZGF0ZSBtYXAKICAgICAgICBtYXB7e3tmcmFtZV9pZH19fS5kYXRhKGZpbHRlcmVkUm93cyk7CiAgICAgICAgbWFwe3t7ZnJhbWVfaWR9fX0ucmVjb2xvcigyMDAwKTsKICAgICAgICAKICAgICAgICAvLyBVcGRhdGUgYmFuZCBtYXJrZXIKICAgICAgICBjaGFydHt7e2ZyYW1lX2lkfX19LnhBeGlzWzBdLnJlbW92ZVBsb3RCYW5kKCd5YmFuZCcpOwogICAgICAgIGNoYXJ0e3t7ZnJhbWVfaWR9fX0ueEF4aXNbMF0uYWRkUGxvdEJhbmQoe2NvbG9yOiAncmdiYSg2OCwgMTcwLCAyMTMsIDAuMyknLCBmcm9tOiB5LTAuNSwgdG86IHkrMC41LCBpZDogJ3liYW5kJ30pOwogICAgfSk7CQkKfTsgICAKCgoKJChnZXREYXRhe3t7ZnJhbWVfaWR9fX0oKQogICAgICAgIC5kb25lKGdldERhdGFDQnt7e2ZyYW1lX2lkfX19KSk7CgoK"
    },




    {
        "name": "dropdownEscalasDyn",
        "content": "Ly9KYXZhU2NyaXB0IHBlcnRlbmVjaWVudGUgYWwgd2lkZ2V0IGRlIG5pdmVsZXMgZGUgYWdyZWdhY2nDs24KZnVuY3Rpb24gZ2V0RGF0YUFnZ0xldmVscygpIHsKICByZXR1cm4gJC5hamF4KHsKICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICB0eXBlOiAiR0VUIiwKICAgIHVybDogInt7e3VybH19fSIKICB9KQp9CmZ1bmN0aW9uIGNhbGxiYWNrRGF0YUFnZ0xldmVscyhkYXRhKSB7CiAgbXlWaWV3TW9kZWwuc2V0RGF0YUFnZ0xldmVscyhkYXRhKQp9CiQoZ2V0RGF0YUFnZ0xldmVscygpLmRvbmUoY2FsbGJhY2tEYXRhQWdnTGV2ZWxzKSk="
    },
    {
        "name": "dropdownIndicadoresDyn",
        "content": "Ly9KYXZhU2NyaXB0IHBlcnRlbmVjaWVudGUgYWwgd2lkZ2V0IGRlIGluZGljYWRvcmVzCmZ1bmN0aW9uIGdldERhdGFJbmRpY2Fkb3JlcygpIHsKICByZXR1cm4gJC5hamF4KHsKICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICB0eXBlOiAiR0VUIiwKICAgIHVybDogInt7e3VybH19fSIKICB9KQp9CgpmdW5jdGlvbiBjYWxsYmFja0RhdGFJbmRpY2Fkb3JlcyhkYXRhKSB7CiAgbXlWaWV3TW9kZWwuc2V0RGF0YUluZGljYWRvcmVzKGRhdGEpCn0KJChnZXREYXRhSW5kaWNhZG9yZXMoKS5kb25lKGNhbGxiYWNrRGF0YUluZGljYWRvcmVzKSk="
    },
    {
        "name": "mapSpainDyn",
        "content": ""
    },
    {
        "name": "dataMapDyn",
        "content": "Ly9KYXZhU2NyaXB0IHBlcnRlbmVjaWVudGUgYWwgd2lkZ2V0IGRlIG1hcGEvZ3LDoWZpY28KbXlWaWV3TW9kZWwuZ2xvYmFsSW5kaWNhZG9yLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7CgogICAgaWYgKG15Vmlld01vZGVsLmdsb2JhbEFnZ0xldmVsKCkgJiYgbXlWaWV3TW9kZWwuZ2xvYmFsSW5kaWNhZG9yKCkpIHsKICAKICAgICAgbGV0IGVzY2FsYSA9IG15Vmlld01vZGVsLmdsb2JhbEFnZ0xldmVsKCk7CiAgICAgIGxldCBpbmRpY2Fkb3IgPSBteVZpZXdNb2RlbC5nbG9iYWxJbmRpY2Fkb3IoKTsKICAgICAgbXlWaWV3TW9kZWwuc2V0VmFyaWFiaWxpZGFkKCd7e3tsYWJlbH19fScpCiAgICAgIAogICAgICBQcm9taXNlLmFsbChbZ2V0RGF0YXt7e2ZyYW1lX2lkfX19KGluZGljYWRvciksIGdldExleWVuZGF7e3tmcmFtZV9pZH19fShpbmRpY2Fkb3IpXSkudGhlbih2YWx1ZXMgPT4gewogIAogICAgICAgIGNvbnN0IGRhdG9zID0gdmFsdWVzWzBdLmZpbHRlcihkYXRvID0+IGRhdG8uZGlzdGludGl2byA9PSAne3t7bGFiZWx9fX0nKVswXQogICAgICAgIGxldCB2YWxvcmVzID0gW2RhdG9zLCB2YWx1ZXNbMV1dCiAgCiAgICAgICAgY29uc3QgZGF0b3NQYXJzZSA9IHBhcnNlYWRvcihlc2NhbGEsIGRhdG9zLmRhdGEpCiAgICAgICAgbXlWaWV3TW9kZWwuc2V0RGF0YSgne3t7bGFiZWx9fX0nLCBkYXRvc1BhcnNlKQogIAogICAgICAgIGdldE1hcGF7e3tmcmFtZV9pZH19fSh2YWxvcmVzKSAgIAogICAgICB9KQogICAgfTsKICB9KTsKICAKICAKICAvL2VzdGFzIHNvbiBsYXMgZnVuY2lvbmVzIGFkZWN1YWRhcyBxdWUgc2UgdXRpbGl6YW4gcGFyYSBvYnRlbmVyIGRhdGEgY29kZSA0NzEKICAvL0phdmFTY3JpcHQgcGVydGVuZWNpZW50ZSBhbCB3aWRnZXQgZGUgbWFwYS9ncsOhZmljbwogIGZ1bmN0aW9uIGdldExleWVuZGF7e3tmcmFtZV9pZH19fShpbmRpY2Fkb3IpIHsKICAgIHJldHVybiAkLmFqYXgoewogICAgICBkYXRhVHlwZTogJ2pzb24nLAogICAgICB0eXBlOiAnR0VUJywKICAgICAgLy9MYSB1cmwgZGVsIHdpZGdldCBkZSBtYXBhCiAgICAgIHVybDogInt7e3VybH19fWxleWVuZGEvIiArIGluZGljYWRvciwKICAgIH0pOwogIH0KICAKICAvL0phdmFTY3JpcHQgcGVydGVuZWNpZW50ZSBhbCB3aWRnZXQgZGUgbWFwYS9ncsOhZmljbwogIGZ1bmN0aW9uIGdldERhdGF7e3tmcmFtZV9pZH19fShpbmRpY2Fkb3IpIHsKICAgIHJldHVybiAkLmFqYXgoewogICAgICBkYXRhVHlwZTogJ2pzb24nLAogICAgICB0eXBlOiAnR0VUJywKICAgICAgdXJsOiAie3t7dXJsfX19ZGF0YS8iICsgaW5kaWNhZG9yLAogICAgfQogICAgKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICByZXR1cm4gZGF0YQogICAgfSk7CiAgfQogIAogIC8vZXN0YXMgc29uIGxhcyBmdW5jaW9uZXMgYWRlY3VhZGFzIHF1ZSBzZSB1dGlsaXphbiBwYXJhIG9idGVuZXIgZGF0YQogIC8vSmF2YVNjcmlwdCBwZXJ0ZW5lY2llbnRlIGFsIHdpZGdldCBkZSBtYXBhL2dyw6FmaWNvCiAgY29uc3QgZ2V0TWFwYXt7e2ZyYW1lX2lkfX19ID0gZnVuY3Rpb24gKGRhdG9zKSB7CiAgICBjb25zdCB7IGlkLCBkYXRhLCBuaXZlbCB9ID0gZGF0b3NbMF07CiAgICBjb25zdCB7IGN1c3RvbUxhYmVscywgY3VzdG9tQnJlYWtzfSA9IGRhdG9zWzFdOwogIAogICAgbGV0IG1hcGEgPSBtYXBTcGFpbignI21hcHt7e2ZyYW1lX2lkfX19Jyk7CiAgCiAgICBtYXBhCiAgICAgIC5kYXRhKGRhdGEpCiAgICAgIC5lc2NhbGEobml2ZWwpCiAgICAgIC5jdXN0b21CcmVha3MoY3VzdG9tQnJlYWtzKQogICAgICAuY3VzdG9tTGFiZWxzKGN1c3RvbUxhYmVscykKICAgICAgLnZhcmlhYmlsaWRhZCgne3t7bGFiZWx9fX0nKQogICAgICAudGl0bGUoJycpCiAgICAgIC5vcGFjaXR5KDEpCiAgICAgIC5wYWludCgpOwogIH0KCiAg"
    },
    {
        "name": "tablePerfilesDyn",
        "content": ""
    },
    {
        "name":"dataLegendDyn",
        "content":"Ci8vSmF2YVNjcmlwdCBwZXJ0ZW5lY2llbnRlIGFsIHdpZGdldCBkZSBtYXBhL2dyw6FmaWNvCm15Vmlld01vZGVsLmdsb2JhbEluZGljYWRvci5zdWJzY3JpYmUoZnVuY3Rpb24gKCkgewoKICAgIGlmIChteVZpZXdNb2RlbC5nbG9iYWxBZ2dMZXZlbCgpICYmIG15Vmlld01vZGVsLmdsb2JhbEluZGljYWRvcigpKSB7CgogICAgICAgIGxldCBpbmRpY2Fkb3IgPSBteVZpZXdNb2RlbC5nbG9iYWxJbmRpY2Fkb3IoKTsKCiAgICAgICAgUHJvbWlzZS5hbGwoW2dldExleWVuZGF7e3tmcmFtZV9pZH19fShpbmRpY2Fkb3IpXSkudGhlbih2YWx1ZXMgPT4gewoKICAgICAgICAgICAgbGV0IHZhbG9yZXMgPSB2YWx1ZXNbMF0KCiAgICAgICAgICAgIHBhaW50TGV5ZW5kYXt7e2ZyYW1lX2lkfX19KHZhbG9yZXMpCiAgICAgICAgfSkKICAgIH07Cn0pOwoKLy9lc3RhcyBzb24gbGFzIGZ1bmNpb25lcyBhZGVjdWFkYXMgcXVlIHNlIHV0aWxpemFuIHBhcmEgb2J0ZW5lciBkYXRhIGNvZGUgNDcxCi8vSmF2YVNjcmlwdCBwZXJ0ZW5lY2llbnRlIGFsIHdpZGdldCBkZSBtYXBhL2dyw6FmaWNvCmZ1bmN0aW9uIGdldExleWVuZGF7e3tmcmFtZV9pZH19fShpbmRpY2Fkb3IpIHsKICAgIHJldHVybiAkLmFqYXgoewogICAgICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICAgICAgdHlwZTogJ0dFVCcsCiAgICAgICAgLy9MYSB1cmwgZGVsIHdpZGdldCBkZSBtYXBhCiAgICAgICAgdXJsOiAie3t7dXJsfX19bGV5ZW5kYS8iICsgaW5kaWNhZG9yLAogICAgfSk7Cn0KCmNvbnN0IHBhaW50TGV5ZW5kYXt7e2ZyYW1lX2lkfX19ID0gZnVuY3Rpb24gKGRhdG9zKSB7CiAgICBjb25zdCB7IGN1c3RvbUxhYmVscywgY3VzdG9tQnJlYWtzIH0gPSBkYXRvczsKCiAgICBsZXQgbGVnZW5kID0gbGV5ZW5kYSgnI2xlZ2VuZHt7e2ZyYW1lX2lkfX19Jyk7CgogICAgbGVnZW5kCiAgICAgICAgLmN1c3RvbUJyZWFrcyhjdXN0b21CcmVha3MpCiAgICAgICAgLmN1c3RvbUxhYmVscyhjdXN0b21MYWJlbHMpCiAgICAgICAgLnBhaW50KCk7Cn0K"
    },
    {
        "name": "legendDyn",
        "content":"ZnVuY3Rpb24gbGV5ZW5kYShmcmFtZV9tYXApIHsKICAgIGxldCBwYWRkaW5nID0gMjA7CiAgICBsZXQgY29udGFpbmVyID0gZDMuc2VsZWN0KGZyYW1lX21hcCk7CiAgICBsZXQgd2lkdGggPSAyMDA7CiAgICBsZXQgaGVpZ2h0ID0gMTUwOwogICAgbGV0IHRpdGxlID0gJ2xleWVuZGEnOyAvL3RpdHVsbyBwb3IgZGVmZWN0bwogICAgbGV0IG9wYWNpdHkgPSAwLjc7IC8vb3BhY2lkYWQgZGVsIG1hcGEKICAgIGxldCBjdXN0b21CcmVha3MgPSBbXTsKICAgIGxldCBjdXN0b21MYWJlbHMgPSBbXTsKCiAgICBsZXQgY29sb3IgPSBudWxsCiAgICBsZXQgY29sb3JMZWdlbmQgPSBudWxsOwoKICAgIGxldCBpbnN0YW5jZSA9IHsKICAgICAgICBzaG93TGVnZW5kOiB0cnVlLAogICAgICAgIGNvbG9yQXJyYXk6IFsKICAgICAgICAgICAgJyNmN2UyZDEnLAogICAgICAgICAgICAnI2UzYjE4YycsCiAgICAgICAgICAgICcjZGY3YTJjJywKICAgICAgICAgICAgJyNiNzVlMWEnLAogICAgICAgICAgICAnIzgzNDMxMycsCiAgICAgICAgXQogICAgfTsKCiAgICAvLyBBY2Nlc29yIHBhcmEgbG9zIGN1c3RvbUJyZWFrcwogICAgaW5zdGFuY2UuY3VzdG9tQnJlYWtzID0gZnVuY3Rpb24gKGNiKSB7CiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2I7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGN1c3RvbUJyZWFrcyA9IGNiOwogICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICAgICAgfQogICAgfTsKCiAgICAvLyBBY2Nlc29yIHBhcmEgbGFzIGN1c3RvbUxhYmVscwogICAgaW5zdGFuY2UuY3VzdG9tTGFiZWxzID0gZnVuY3Rpb24gKGNsKSB7CiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY2w7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGN1c3RvbUxhYmVscyA9IGNsOwogICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICAgICAgfQogICAgfTsKCgogICAgbGV0IGluaXRpYWxpemUgPSBmdW5jdGlvbiAocmVzdWx0cykgewogICAgICAgIC8vY29uc29sZS5sb2coJ3RvcG9qc29uJywgcmVzdWx0cyk7CgogICAgICAgIC8vIEZ1bmNpw7NuIHBhcmEgZGV0ZXJtaW5hciBlbCBjb2xvciBkZSBjYWRhIHRlcnJpdG9yaW8KICAgICAgICAvL3NjYWxlVGhyZXNob2xkIGVzIGlkZWFsIHBhcmEgcGludGFyIGxleWVuZGFzIGRlIGNvbG9yZXMgY29udGludW9zCiAgICAgICAgY29sb3IgPSBkMy5zY2FsZVRocmVzaG9sZCgpCiAgICAgICAgICAgIC5kb21haW4oY3VzdG9tQnJlYWtzKQogICAgICAgICAgICAucmFuZ2UoaW5zdGFuY2UuY29sb3JBcnJheSk7CgogICAgICAgIGNvbG9yTGVnZW5kID0gZDMuc2NhbGVPcmRpbmFsKCkKICAgICAgICAgICAgLmRvbWFpbihjdXN0b21MYWJlbHMpCiAgICAgICAgICAgIC5yYW5nZShpbnN0YW5jZS5jb2xvckFycmF5KTsKCgogICAgICAgIGlmIChpbnN0YW5jZS5zaG93TGVnZW5kKSB7CgogICAgICAgICAgICBsZXQgbGVnZW5kU3ZnID0gY29udGFpbmVyLnNlbGVjdEFsbCgnc3ZnJykKICAgICAgICAgICAgICAgIC5kYXRhKFtudWxsXSkKICAgICAgICAgICAgICAgIC5qb2luKCdzdmcnKQogICAgICAgICAgICAvLy5zdHlsZSgnaGVpZ2h0JywgMTUwKQogICAgICAgICAgICAvLy5zdHlsZSgnd2lkdGgnLCAyMDApOwoKICAgICAgICAgICAgbGV0IGxlZ2VuZCA9IGxlZ2VuZFN2Zy5zZWxlY3RBbGwoIi5sZWdlbmQtaXRlbSIpCiAgICAgICAgICAgICAgICAuZGF0YShjdXN0b21MYWJlbHMpOwoKICAgICAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGxlZ2VuZCBpdGVtcwogICAgICAgICAgICBsZWdlbmQuc2VsZWN0KCJ0ZXh0IikKICAgICAgICAgICAgICAgIC50ZXh0KChkKSA9PiBkKTsKCiAgICAgICAgICAgIC8vIEVudGVyIG5ldyBsZWdlbmQgaXRlbXMKICAgICAgICAgICAgbGV0IGxlZ2VuZEVudGVyID0gbGVnZW5kLmVudGVyKCkuYXBwZW5kKCJnIikKICAgICAgICAgICAgICAgIC5hdHRyKCJjbGFzcyIsICJsZWdlbmQtaXRlbSIpCiAgICAgICAgICAgICAgICAuYXR0cigidHJhbnNmb3JtIiwgZnVuY3Rpb24gKGQsIGkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gInRyYW5zbGF0ZSgxMCwiICsgKGkgKiAyNSArIDEwKSArICIpIjsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgbGVnZW5kRW50ZXIuYXBwZW5kKCJyZWN0IikKICAgICAgICAgICAgICAgIC5hdHRyKCJ3aWR0aCIsIDIwKQogICAgICAgICAgICAgICAgLmF0dHIoImhlaWdodCIsIDIwKQogICAgICAgICAgICAgICAgLnN0eWxlKCJmaWxsIiwgKGQpID0+IGNvbG9yTGVnZW5kKGQpKTsKCiAgICAgICAgICAgIGxlZ2VuZEVudGVyLmFwcGVuZCgidGV4dCIpCiAgICAgICAgICAgICAgICAuYXR0cigieCIsIDMwKQogICAgICAgICAgICAgICAgLmF0dHIoInkiLCAxNSkKICAgICAgICAgICAgICAgIC50ZXh0KChkKSA9PiBkKTsKCiAgICAgICAgICAgIC8vIFJlbW92ZSBleGl0ZWQgbGVnZW5kIGl0ZW1zCiAgICAgICAgICAgIGxlZ2VuZC5leGl0KCkucmVtb3ZlKCk7CgogICAgICAgICAgICAvLyBSZXNpemUgU1ZHIHdpZHRoIGJhc2VkIG9uIGNvbnRlbnQKICAgICAgICAgICAgbGV0IGxlZ2VuZFdpZHRoID0gbGVnZW5kU3ZnLm5vZGUoKS5nZXRCQm94KCkud2lkdGg7CiAgICAgICAgICAgIGxlZ2VuZFN2Zy5zdHlsZSgid2lkdGgiLCBsZWdlbmRXaWR0aCArIDIwKTsgLy8gQWRkIHNvbWUgcGFkZGluZyBpZiBuZWVkZWQKCiAgICAgICAgfQoKICAgIH07CgoKICAgIC8vIENhcmdhIGxvcyB0b3BvanNvbiB5IHBpbnRhIGVsIG1hcGEKICAgIGluc3RhbmNlLnBhaW50ID0gZnVuY3Rpb24gKCkgewogICAgICAgIGluaXRpYWxpemUoKQoKICAgICAgICByZXR1cm4gaW5zdGFuY2U7CiAgICB9OwoKICAgIHJldHVybiBpbnN0YW5jZTsKfQoK"
    }
]